# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'serverwindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import msgdialog
import kickdialog
import openauctiondialog
# import ui_dir.infodialog   # 后面要改
import server_message
import sys
import time


class Ui_serverwindow(object):
    def setupUi(self, serverwindow,server):
        serverwindow.setObjectName("serverwindow")
        serverwindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(serverwindow)
        self.centralwidget.setObjectName("centralwidget")
        self.announcementbox = QtWidgets.QGroupBox(self.centralwidget)
        self.announcementbox.setGeometry(QtCore.QRect(30, 130, 351, 311))
        self.announcementbox.setObjectName("announcementbox")
        self.anouncementscrollarea_2 = QtWidgets.QScrollArea(self.announcementbox)
        self.anouncementscrollarea_2.setGeometry(QtCore.QRect(9, 29, 331, 271))
        self.anouncementscrollarea_2.setWidgetResizable(True)
        self.anouncementscrollarea_2.setObjectName("anouncementscrollarea_2")
        self.anouncementscrollarea = QtWidgets.QWidget()
        self.anouncementscrollarea.setGeometry(QtCore.QRect(0, 0, 329, 269))
        self.anouncementscrollarea.setObjectName("anouncementscrollarea")
        self.announcementtext = QtWidgets.QTextBrowser(self.anouncementscrollarea)
        self.announcementtext.setGeometry(QtCore.QRect(0, 0, 331, 271))
        self.announcementtext.setObjectName("announcementtext")
        self.anouncementscrollarea_2.setWidget(self.anouncementscrollarea)
        self.upperline = QtWidgets.QFrame(self.centralwidget)
        self.upperline.setGeometry(QtCore.QRect(0, 0, 970, 25))
        self.upperline.setStyleSheet("background-color : rgb(32, 106, 122);")
        self.upperline.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.upperline.setFrameShadow(QtWidgets.QFrame.Raised)
        self.upperline.setObjectName("upperline")
        self.FDU_label = QtWidgets.QLabel(self.upperline)
        self.FDU_label.setGeometry(QtCore.QRect(10, 0, 281, 21))
        self.FDU_label.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 11pt \"黑体\";")
        self.FDU_label.setObjectName("FDU_label")
        self.OperationButtonbox = QtWidgets.QGroupBox(self.centralwidget)
        self.OperationButtonbox.setGeometry(QtCore.QRect(420, 130, 351, 291))
        self.OperationButtonbox.setObjectName("OperationButtonbox")
        self.gridLayoutWidget = QtWidgets.QWidget(self.OperationButtonbox)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(30, 40, 291, 221))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.openauctionbutton = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.openauctionbutton.setObjectName("openauctionbutton")
        self.gridLayout.addWidget(self.openauctionbutton, 0, 0, 1, 1)
        self.msgbutton = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.msgbutton.setObjectName("msgbutton")
        self.gridLayout.addWidget(self.msgbutton, 2, 0, 1, 1)
        self.listbutton = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.listbutton.setObjectName("listbutton")
        self.gridLayout.addWidget(self.listbutton, 2, 1, 1, 1)
        self.closeauctionbutton = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.closeauctionbutton.setObjectName("closeauctionbutton")
        self.gridLayout.addWidget(self.closeauctionbutton, 0, 1, 1, 1)
        self.kickoutbutton = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.kickoutbutton.setObjectName("kickoutbutton")
        self.gridLayout.addWidget(self.kickoutbutton, 3, 0, 1, 1)
        serverwindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(serverwindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 800, 22))
        self.menubar.setObjectName("menubar")
        serverwindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(serverwindow)
        self.statusbar.setObjectName("statusbar")
        serverwindow.setStatusBar(self.statusbar)

        self.retranslateUi(serverwindow)
        QtCore.QMetaObject.connectSlotsByName(serverwindow)

        # 按钮绑定
        self.msgbutton.clicked.connect(lambda:self.msg_button_handler(server))
        self.listbutton.clicked.connect(lambda:self.list_button_handler(server))
        self.kickoutbutton.clicked.connect(lambda:self.kick_button_handler(server))
        self.openauctionbutton.clicked.connect(lambda:self.open_button_handler(server))
        self.closeauctionbutton.clicked.connect(lambda:self.close_button_handler(server))


    def retranslateUi(self, serverwindow):
        _translate = QtCore.QCoreApplication.translate
        serverwindow.setWindowTitle(_translate("serverwindow", "MainWindow"))
        self.announcementbox.setTitle(_translate("serverwindow", "公开信息"))
        self.announcementtext.setHtml(_translate("serverwindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'SimSun\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">这里是公开信息。</p></body></html>"))
        self.FDU_label.setText(_translate("serverwindow", "FDU 定制电动车牌拍卖"))
        self.OperationButtonbox.setTitle(_translate("serverwindow", "拍卖操作"))
        self.openauctionbutton.setText(_translate("serverwindow", "开始拍卖>o<"))
        self.msgbutton.setText(_translate("serverwindow", "发消息(balabala)"))
        self.listbutton.setText(_translate("serverwindow", "参拍者信息"))
        self.closeauctionbutton.setText(_translate("serverwindow", "结束拍卖(@.@)"))
        self.kickoutbutton.setText(_translate("serverwindow", "踢人！"))

    # 发消息给客户
    def msg_button_handler(self,server):
        # 实例化发消息子窗口
        msg_dialog = QtWidgets.QDialog()
        ui_msg_dialog = msgdialog.Ui_Dialog()
        ui_msg_dialog.setupUi(msg_dialog,server)
        msg_dialog.exec_()
        # 此处最好展示一下发了。。消息给。。。

    # 踢人
    def kick_button_handler(self,server):
        # 实例化踢人子窗口
        kick_dialog = QtWidgets.QDialog()
        ui_kick_dialog = kickdialog.Ui_Dialog()
        ui_kick_dialog.setupUi(kick_dialog,server)
        kick_dialog.exec_()

    # 列出参拍者信息
    def list_button_handler(self,server):
        s = "当前在线人数:{}\n".format(len(server.client_pool))
        s += "当前在线客户信息：\n"
        for i in server.client_pool.items():
            s += str(i)  # 一个客户信息一行
            s += '\n'
        self.announcementtext.append(s)  # 消息栏里更新消息
        # 消息栏文本框滑倒底部
        self.announcementtext.moveCursor(self.announcementtext.textCursor().End)

    # 开始拍卖
    def open_button_handler(self,server):
        # 实例化拍卖信息输入子窗口
        open_dialog = QtWidgets.QDialog()
        ui_open_dialog = openauctiondialog.Ui_openauctiondialog()
        ui_open_dialog.setupUi(open_dialog,server)
        open_dialog.exec_()
        self.show_status(server)  # 展示拍卖状态

    def close_button_handler(self,server):
        server.close_auction()
        s = '中标人信息：\n'
        print(server.bidder_pool)
        for i in server.bidder_pool:  # 展示所有中标人信息
            s += '('
            s += str(i[0])+','
            s += str(time.asctime(time.localtime(i[1])))+','
            s += str(i[2])
            s += ')\n'
        if(server.bidder_pool):
            s += '最高中标价格:{}\n'.format(server.bidder_pool[0][0])
            s += '最低中标价格:{}\n'.format(server.bidder_pool[-1][0])
        s += '平均中标价格:{}\n'.format(server.mean_bid_price)
        s += "当前时间:{}\n".format(
            time.asctime(time.localtime(time.time())))

        self.announcementtext.append(s)  # 消息栏里更新消息
        # 消息栏文本框滑倒底部
        self.announcementtext.moveCursor(self.announcementtext.textCursor().End)

    # 消息展示的线程
    def show_status(self,server):
        s = ''
        if server.is_auction_begin:
            s += "拍卖已经开始\n"
            s += "今日拍卖车牌数目:{}\n".format(server.licence_num)
            s += "车牌范围：[{},{}]\n".format(server.licence_range[0],
                                       server.licence_range[1])
            s += "起拍价:{}\n".format(server.floor_price)
            s += "当前最低可中标价格:{}\n".format(server.current_lowest_bid[0])
            s += "当前最低可中标价格投标时间:{}\n".format(
                time.asctime(time.localtime(server.current_lowest_bid[1])))
            s += "当前时间:{}\n".format(
                 time.asctime(time.localtime(time.time())))
        else:
            s += "拍卖还未开始\n"
        s += "当前在线人数:{}\n".format(len(server.client_pool))

        self.announcementtext.append(s)  # 消息栏里更新消息
        # 消息栏文本框滑倒底部
        self.announcementtext.moveCursor(self.announcementtext.textCursor().End)


if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    # 实例化主窗口
    server = server_message.Server()  # 服务端消息类

    serverWindow = QtWidgets.QMainWindow()
    ui_server_window = Ui_serverwindow()
    ui_server_window.setupUi(serverWindow,server)  # loginwindow初始化
    serverWindow.show()  # 展示loginwindow

    sys.exit(app.exec_())