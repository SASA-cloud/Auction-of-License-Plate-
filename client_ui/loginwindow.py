# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'loginwindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import sys
import signindialog
import client_message
import infodialog
import bidwindow_c

class Ui_LoginWindow():
    def setupUi(self, LoginWindow,signal,client):
        # 是否关闭
        self.isclose = 0
        LoginWindow.setObjectName("LoginWindow")
        LoginWindow.resize(400, 300)
        self.login_groupbox = QtWidgets.QGroupBox(LoginWindow)
        self.login_groupbox.setGeometry(QtCore.QRect(20, 50, 361, 171))
        self.login_groupbox.setObjectName("login_groupbox")
        self.signin_button = QtWidgets.QPushButton(self.login_groupbox)
        self.signin_button.setGeometry(QtCore.QRect(60, 120, 91, 25))
        self.signin_button.setStyleSheet("")
        self.signin_button.setObjectName("signin_button")
        self.login_button = QtWidgets.QPushButton(self.login_groupbox)
        self.login_button.setGeometry(QtCore.QRect(190, 120, 91, 25))
        self.login_button.setStyleSheet("")
        self.login_button.setObjectName("login_button")
        self.horizontalLayoutWidget = QtWidgets.QWidget(self.login_groupbox)
        self.horizontalLayoutWidget.setGeometry(QtCore.QRect(50, 40, 241, 31))
        self.horizontalLayoutWidget.setObjectName("horizontalLayoutWidget")
        self.useridhl = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget)
        self.useridhl.setContentsMargins(0, 0, 0, 0)
        self.useridhl.setObjectName("useridhl")
        self.id_label = QtWidgets.QLabel(self.horizontalLayoutWidget)
        self.id_label.setStyleSheet("QPushButton{\n"
"background-color: rgb(179, 214, 230);\n"
"color: white;\n"
"border:2px solid #000000;\n"
"padding: 16px 32px;\n"
"text-align: center;\n"
"font-size: 16px;\n"
"margin:4px 2px;\n"
"border-radius: 12px;\n"
"hover{color: black};\n"
"hover{background-color: white};\n"
"hover{border: 2px solid #000000}\n"
"}")
        self.id_label.setObjectName("id_label")
        self.useridhl.addWidget(self.id_label)
        self.id_text = QtWidgets.QLineEdit(self.horizontalLayoutWidget)
        self.id_text.setToolTip("")
        self.id_text.setInputMethodHints(QtCore.Qt.ImhDigitsOnly)
        self.id_text.setInputMask("")
        self.id_text.setText("")
        self.id_text.setMaxLength(100000)
        self.id_text.setObjectName("id_text")
        self.useridhl.addWidget(self.id_text)
        self.horizontalLayoutWidget_2 = QtWidgets.QWidget(self.login_groupbox)
        self.horizontalLayoutWidget_2.setGeometry(QtCore.QRect(50, 70, 241, 31))
        self.horizontalLayoutWidget_2.setObjectName("horizontalLayoutWidget_2")
        self.userkeyhl = QtWidgets.QHBoxLayout(self.horizontalLayoutWidget_2)
        self.userkeyhl.setContentsMargins(0, 0, 0, 0)
        self.userkeyhl.setObjectName("userkeyhl")
        self.key_label = QtWidgets.QLabel(self.horizontalLayoutWidget_2)
        self.key_label.setObjectName("key_label")
        self.userkeyhl.addWidget(self.key_label)
        self.key_text = QtWidgets.QLineEdit(self.horizontalLayoutWidget_2)
        self.key_text.setObjectName("key_text")
        self.userkeyhl.addWidget(self.key_text)

        self.retranslateUi(LoginWindow)
        QtCore.QMetaObject.connectSlotsByName(LoginWindow)

        # 按钮绑定
        self.login_button.clicked.connect(lambda:self.login_button_handler(LoginWindow,signal,client))
        self.signin_button.clicked.connect(self.signin_button_handler)  # 点击注册按钮弹出注册对话框

    def retranslateUi(self, LoginWindow):
        _translate = QtCore.QCoreApplication.translate
        LoginWindow.setWindowTitle(_translate("LoginWindow", "Form"))
        self.login_groupbox.setTitle(_translate("LoginWindow", "登录"))
        self.signin_button.setText(_translate("LoginWindow", "注册"))
        self.login_button.setText(_translate("LoginWindow", "登录"))
        self.id_label.setText(_translate("LoginWindow", "用户id  "))
        self.id_text.setWhatsThis(_translate("LoginWindow", "id"))
        self.id_text.setPlaceholderText(_translate("LoginWindow", "请输入id..."))
        self.key_label.setText(_translate("LoginWindow", "用户密码"))
        self.key_text.setPlaceholderText(_translate("LoginWindow", "请输入密码..."))

    def login_button_handler(self,LoginWindow,signal,client):
        id = self.id_text.text()
        key = self.key_text.text()
        # 合理性检验
        client.login(id,key)
        code = client.recv()
        if code == 0:  # 登陆成功
            # 关闭当前窗口，跳到拍卖窗口
            signal.run()  # 发射信号
            LoginWindow.close()

        else:  # 登录失败
            s = "用户id或密码错误!\n"
            # 实例化消息窗口
            info_dialog = QtWidgets.QDialog()
            ui_info_dialog = infodialog.Ui_infodialog()
            ui_info_dialog.setupUi(info_dialog)
            ui_info_dialog.infolabe.setText(s)
            info_dialog.exec_()

    def signin_button_handler(self):
        # 实例化注册子窗口
        signin_dialog = QtWidgets.QDialog()
        ui_signin_dialog = signindialog.Ui_SigninDialog()
        ui_signin_dialog.setupUi(signin_dialog)
        signin_dialog.exec_()



class SignalBdWindow(QtCore.QObject):
    sendmsg = QtCore.pyqtSignal()
    def __init__(self):
        super(SignalBdWindow,self).__init__()
    def run(self):
        self.sendmsg.emit()

if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    # 实例化主窗口
    signal = SignalBdWindow()
    client = client_message.Client()  # 客户端消息类

    loginWindow = QtWidgets.QMainWindow()
    ui_login_window = Ui_LoginWindow()
    ui_login_window.setupUi(loginWindow,signal,client)  # loginwindow初始化
    loginWindow.show()  # 展示loginwindow

    bidwindow = QtWidgets.QMainWindow()  # bidwindow
    ui_bid_window = bidwindow_c.Ui_MainWindow()
    ui_bid_window.setupUi(bidwindow,client)
    signal.sendmsg.connect(bidwindow.show)  # 关loginwindow 开bidwindow
    signal.sendmsg.connect(lambda:ui_bid_window.start(client))  # 开启接受消息的线程
    sys.exit(app.exec_())