# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'untitled.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtWidgets
import sys
import biddialog
import client_message
import infodialog
import threading
import time

class Ui_MainWindow(object):
    def setupUi(self, MainWindow,client):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(967, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.upperline = QtWidgets.QFrame(self.centralwidget)
        self.upperline.setGeometry(QtCore.QRect(0, 0, 970, 25))
        self.upperline.setStyleSheet("background-color : rgb(32, 106, 122);")
        self.upperline.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.upperline.setFrameShadow(QtWidgets.QFrame.Raised)
        self.upperline.setObjectName("upperline")
        self.FDU_label = QtWidgets.QLabel(self.upperline)
        self.FDU_label.setGeometry(QtCore.QRect(10, 0, 281, 21))
        self.FDU_label.setStyleSheet("color: rgb(255, 255, 255);\n"
"font: 11pt \"黑体\";")
        self.FDU_label.setObjectName("FDU_label")
        self.announcementbox = QtWidgets.QGroupBox(self.centralwidget)
        self.announcementbox.setGeometry(QtCore.QRect(40, 120, 351, 311))
        self.announcementbox.setObjectName("announcementbox")
        self.anouncementscrollarea_2 = QtWidgets.QScrollArea(self.announcementbox)
        self.anouncementscrollarea_2.setGeometry(QtCore.QRect(9, 29, 331, 271))
        self.anouncementscrollarea_2.setWidgetResizable(True)
        self.anouncementscrollarea_2.setObjectName("anouncementscrollarea_2")
        self.anouncementscrollarea = QtWidgets.QWidget()
        self.anouncementscrollarea.setGeometry(QtCore.QRect(0, 0, 329, 269))
        self.anouncementscrollarea.setObjectName("anouncementscrollarea")
        self.announcementtext = QtWidgets.QTextBrowser(self.anouncementscrollarea)
        self.announcementtext.setGeometry(QtCore.QRect(0, 0, 331, 271))
        self.announcementtext.setObjectName("announcementtext")
        self.anouncementscrollarea_2.setWidget(self.anouncementscrollarea)
        self.OperationButtonbox = QtWidgets.QGroupBox(self.centralwidget)
        self.OperationButtonbox.setGeometry(QtCore.QRect(540, 130, 351, 291))
        self.OperationButtonbox.setObjectName("OperationButtonbox")
        self.gridLayoutWidget = QtWidgets.QWidget(self.OperationButtonbox)
        self.gridLayoutWidget.setGeometry(QtCore.QRect(30, 40, 291, 221))
        self.gridLayoutWidget.setObjectName("gridLayoutWidget")
        self.gridLayout = QtWidgets.QGridLayout(self.gridLayoutWidget)
        self.gridLayout.setContentsMargins(0, 0, 0, 0)
        self.gridLayout.setObjectName("gridLayout")
        self.bidbutton = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.bidbutton.setObjectName("bidbutton")
        self.gridLayout.addWidget(self.bidbutton, 0, 0, 1, 1)
        self.refreshbutton = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.refreshbutton.setObjectName("refreshbutton")
        self.gridLayout.addWidget(self.refreshbutton, 1, 0, 1, 1)
        self.leavebutton = QtWidgets.QPushButton(self.gridLayoutWidget)
        self.leavebutton.setObjectName("leavebutton")
        self.gridLayout.addWidget(self.leavebutton, 2, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 967, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # 绑定槽函数
        self.bidbutton.clicked.connect(lambda:self.bid_button_handler(client))  # 竞价按钮
        self.leavebutton.clicked.connect(lambda:self.leave_button_hander(client))  # 离开按钮
        self.refreshbutton.clicked.connect(lambda:self.refresh_button_handler(client))  # 刷新按钮

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.FDU_label.setText(_translate("MainWindow", "FDU 定制电动车牌拍卖"))
        self.announcementbox.setTitle(_translate("MainWindow", "公开信息"))
        self.announcementtext.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"</style></head><body style=\" font-family:\'SimSun\'; font-size:9pt; font-weight:400; font-style:normal;\">\n"
"<p style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\">这里是公开信息。</p></body></html>"))
        self.OperationButtonbox.setTitle(_translate("MainWindow", "参与竞标"))
        self.bidbutton.setText(_translate("MainWindow", "竞价(>o<)"))
        self.refreshbutton.setText(_translate("MainWindow", "刷新:)"))
        self.leavebutton.setText(_translate("MainWindow", "离开:("))


    # 竞价按钮处理函数
    def bid_button_handler(self,client):
        # 实例化竞价子窗口
        bid_dialog = QtWidgets.QDialog()
        bid_dialog_ui = biddialog.Ui_Biddialog()
        bid_dialog_ui.setupUi(bid_dialog,client)
        bid_dialog.exec_()

    # 离开按钮处理函数
    def leave_button_hander(self,client):
        client.leave()  # 发送请求离开消息

    # 刷新按钮处理函数
    def refresh_button_handler(self,client):
        client.refresh()  # 发送请求刷新消息

    # 消息展示的线程
    def show_msg(self,client):
        while True:
            result = client.recv()
            s = result
            self.announcementtext.append(s)  # 消息栏里更新消息
            # 消息栏文本框滑倒底部
            self.announcementtext.moveCursor(self.announcementtext.textCursor().End)
            time.sleep(1)  # 1s中刷新一次
            if s == "您可以离开，再见~\n"or s[0:5]=="拍卖结束了":
                client.sock.close()
                self.bidbutton.clicked.disconnect()  # 竞价按钮
                self.leavebutton.clicked.disconnect()  # 离开按钮
                self.refreshbutton.clicked.disconnect()  # 刷新按钮
                break


    # 启动接收消息的线程
    def start(self, client):
        t_msg = threading.Thread(target=self.show_msg, args=(client,))
        t_msg.setDaemon(True)
        t_msg.start()


if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    # 实例化主窗口
    mainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(mainWindow)

    mainWindow.show()
    sys.exit(app.exec_())
